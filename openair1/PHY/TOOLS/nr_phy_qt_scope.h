/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

/* Header file generated by Bo Zhao (Fraunhofer IIS) on Wed. Dec. 08, 2021*/

#ifndef QT_SCOPE_MAINWINDOW_H
#define QT_SCOPE_MAINWINDOW_H

#include <QWidget>
#include <QComboBox>
#include <QMessageBox>

extern "C" {
#include <common/utils/system.h>
#include "PHY/defs_gNB.h"
#include "PHY/defs_nr_UE.h"
}

// drop-down list
class KPIListSelect : public QComboBox
{
    Q_OBJECT

public:
    explicit KPIListSelect(QWidget *parent = 0);
	~KPIListSelect();

private:
    
};


// Paint first on a pixmap, then on the widget. Previous paint is erased
class PainterWidget : public QWidget
{
    Q_OBJECT

public:
    PainterWidget(PHY_VARS_NR_UE *ue);
    QPixmap *pix;
    QTimer *timer;

protected:
    void paintEvent(QPaintEvent *event);

public slots:
    void paintPixmap();

private:
	PHY_VARS_NR_UE *ue;
};

// Accumulated painting including all previous data, all painted first on a pixmap, then on the widget
class AccumWidget : public QWidget
{
    Q_OBJECT

public:
    AccumWidget(PHY_VARS_NR_UE *ue);
    QPixmap *pix;
    QTimer *timer;

protected:
    void paintEvent(QPaintEvent *event);

public slots:
    void paintPixmap();

private:
	PHY_VARS_NR_UE *ue;

};



#endif // QT_SCOPE_MAINWINDOW_H
